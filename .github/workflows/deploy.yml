# 📦 Next.js 프로젝트를 AWS Lambda + S3 + CloudFront에 배포하기 위한 GitHub Actions Workflow

name: Deploy Next.js to Lambda + S3 + CloudFront (with Layer)

on:
  push:
    branches: [main] # main 브랜치에 push될 때 실행됨

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: ✅ 저장소 체크아웃
        uses: actions/checkout@v3

      # 2. Node.js 설정
      - name: 🟦 Node.js 환경 설정
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      # 3. 의존성 설치
      - name: 📦 의존성 설치
        run: npm ci

      # 4. jq 설치 (JSON 파싱용)
      - name: 🔧 jq 설치
        run: sudo apt-get update && sudo apt-get install -y jq

      # 5. Lambda Layer를 위한 최소 패키지 설치 (react/react-dom만 포함)
      - name: 📦 Lambda Layer 의존성 설치
        run: |
          mkdir -p layer/nodejs
          cd layer/nodejs
          echo '{
            "name": "lambda-layer",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "react": "^19.0.0",
              "react-dom": "^19.0.0"
            }
          }' > package.json
          npm install --omit=dev

      # 6. Layer 최적화 및 압축
      - name: 🧹 Lambda Layer 최적화 및 압축
        run: |
          cd layer
          find nodejs -type f -name "*.md" -delete || true
          find nodejs -type f -name "*.map" -delete || true
          find nodejs -type d -name "test" -exec rm -rf {} + || true
          find nodejs -type d -name "__tests__" -exec rm -rf {} + || true
          zip -r layer.zip nodejs

      # 7. AWS 자격 증명 설정
      - name: 🔐 AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 8. Lambda Layer 업로드 및 게시
      - name: ☁️ Lambda Layer 업로드 및 게시
        run: |
          aws s3 cp layer/layer.zip s3://${{ secrets.S3_LAMBDA_ADDRESS }}/layer/layer.zip
          PUBLISH_RESULT=$(aws lambda publish-layer-version \
            --layer-name next-layer \
            --content S3Bucket=${{ secrets.S3_LAMBDA_ADDRESS }},S3Key=layer/layer.zip \
            --compatible-runtimes nodejs20.x \
            --description "Next.js runtime dependencies" \
            --region ap-northeast-2)
          LAYER_ARN=$(echo $PUBLISH_RESULT | jq -r '.LayerVersionArn')
          echo "LAMBDA_LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV

      # 9. Next.js 빌드 및 Lambda 파일 구성
      - name: 🔨 Lambda 실행 파일 및 리소스 준비
        run: |
          npm run build
          mkdir -p lambda

          # standalone 디렉토리 복사
          cp -r .next/standalone/* lambda/
          cp index.js lambda/index.js

          # .next/required-server-files.json 복사
          mkdir -p lambda/.next
          cp .next/required-server-files.json lambda/.next/required-server-files.json

          # required-server-files.json 내부 파일 복사
          REQUIRED_FILES=$(node -e "console.log(require('./.next/required-server-files.json').files.join('\n'))")
          for file in $REQUIRED_FILES; do
            if [ -f "$file" ]; then
              mkdir -p "lambda/$(dirname "$file")"
              cp "$file" "lambda/$file"
            fi
          done

          # .next/server 전체 복사 (중복 방지)
          cp -r .next/server lambda/.next/

          # 정적 파일 복사
          if [ -d ".next/static" ]; then
            mkdir -p lambda/.next
            cp -r .next/static lambda/.next/static
          fi

          # next 모듈 복사
          mkdir -p lambda/node_modules
          cp -r node_modules/next lambda/node_modules/

          # Layer로 이동한 모듈 제거
          rm -rf lambda/node_modules/react || true
          rm -rf lambda/node_modules/react-dom || true

          # 🔧 [추가] SSR 핸들러 누락 방지: 직접 복사
          SSR_HANDLER_DIR=".next/server/app/ssr"
          if [ -f "$SSR_HANDLER_DIR/page.js" ]; then
            mkdir -p "lambda/$SSR_HANDLER_DIR"
            cp "$SSR_HANDLER_DIR/page.js" "lambda/$SSR_HANDLER_DIR/"
          fi
          if [ -f "$SSR_HANDLER_DIR/page.js.nft.json" ]; then
            cp "$SSR_HANDLER_DIR/page.js.nft.json" "lambda/$SSR_HANDLER_DIR/"
          fi

      # 10. Lambda 코드 압축
      - name: 📦 Lambda 코드 압축
        run: |
          cd lambda
          zip -r ../lambda.zip .

      # 11. Lambda 함수 코드 업데이트
      - name: 🚀 Lambda 함수 코드 업데이트
        run: |
          aws s3 cp lambda.zip s3://${{ secrets.S3_LAMBDA_ADDRESS }}/lambda/lambda.zip
          aws lambda update-function-code \
            --function-name nextJs \
            --s3-bucket ${{ secrets.S3_LAMBDA_ADDRESS }} \
            --s3-key lambda/lambda.zip

      # 12. Lambda 상태 대기 후 Layer 연결
      - name: Wait for Lambda update to complete and attach Layer
        run: |
          echo "⏳ Lambda 함수 상태 확인 중..."
          for i in {1..60}; do
            STATUS=$(aws lambda get-function-configuration --function-name nextJs --query 'LastUpdateStatus' --output text)
            echo "현재 상태: $STATUS"
            if [ "$STATUS" = "Successful" ]; then
              echo "✅ Lambda 함수 업데이트 완료됨"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Lambda 업데이트 실패"
              exit 1
            fi
            sleep 5
          done

          echo "🔗 Layer 연결 중..."
          aws lambda update-function-configuration \
            --function-name nextJs \
            --layers $LAMBDA_LAYER_ARN

      # 13. 정적 자산 S3로 업로드
      - name: 🖼 정적 자산 S3 업로드
        run: |
          aws s3 sync public ${{ secrets.S3_STORAGE_ADDRESS }}/public --delete
          if [ -d ".next/static" ]; then
            aws s3 sync .next/static ${{ secrets.S3_STORAGE_ADDRESS }}/_next/static --delete
          fi

      # 14. CloudFront 캐시 무효화
      - name: 🚫 CloudFront 캐시 무효화
        run: |
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          fi
