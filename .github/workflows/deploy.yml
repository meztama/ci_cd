name: Deploy Next.js to Lambda + S3 + CloudFront (with Layer)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      # 3. 의존성 설치
      - name: Install dependencies
        run:
          npm ci

          # 3.5 Lambda Layer 최적화 및 압축
      - name: Optimize and Zip Lambda Layer
        run: |
          cd layer

          echo "🔍 Removing unnecessary platform-specific binaries..."
          rm -rf nodejs/node_modules/@next/swc-darwin-* || true
          rm -rf nodejs/node_modules/@img/sharp-libvips-darwin-arm64 || true

          echo "🧹 Removing debug/development files (.map, .json)..."
          find nodejs -name "*.map" -type f -delete || true
          find nodejs -name "*.json" -type f -delete || true

          echo "📦 Zipping layer..."
          zip -r ../layer.zip nodejs

          echo "📏 Final zip size:"
          du -sh ../layer.zip

      # 4. Next.js 빌드 및 Lambda 파일 구성
      - name: Build and prepare Lambda files
        run: |
          npm run build

          mkdir -p lambda
          cp -r .next/standalone/* lambda/
          mkdir -p lambda/.next
          cp .next/required-server-files.json lambda/.next/required-server-files.json

          if [ -d ".next/static" ]; then
            cp -r .next/static lambda/.next/static
          fi

          cp index.js lambda/index.js

          echo "🧹 Removing duplicated modules already in Lambda Layer..."
          LAYER_MODULES=("next" "react" "react-dom" "scheduler" "react-is")
          for pkg in "${LAYER_MODULES[@]}"; do
            echo "  - Removing lambda/node_modules/$pkg"
            rm -rf lambda/node_modules/$pkg
            echo "  - Removing nested: $(find lambda/node_modules -type d -path "*$pkg*" | grep -E "$pkg@")"
            find lambda/node_modules -type d -path "*$pkg*" | grep -E "$pkg@" | xargs rm -rf || true
          done

      # 5. Lambda 압축 파일 생성
      - name: Zip Lambda package
        run: |
          cd lambda
          zip -r ../lambda.zip .

      # 6. AWS 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 7. Lambda zip 파일 S3 업로드
      - name: Upload Lambda zip to S3
        run: |
          aws s3 cp lambda.zip s3://${{ secrets.S3_LAMBDA_ADDRESS }}/lambda/lambda.zip

      # 8. Lambda 함수 코드만 먼저 업데이트
      - name: Update Lambda function code only
        run: |
          aws lambda update-function-code \
            --function-name nextJs \
            --s3-bucket ${{ secrets.S3_LAMBDA_ADDRESS }} \
            --s3-key lambda/lambda.zip

      # 9. Lambda 상태 확인 후 Layer 적용
      - name: Wait for Lambda to become Active
        run: |
          echo "⏳ Waiting for Lambda update to complete..."
          for i in {1..30}; do
            STATUS=$(aws lambda get-function-configuration --function-name nextJs --query 'LastUpdateStatus' --output text)
            echo "🔍 Status: $STATUS"
            if [ "$STATUS" = "Successful" ]; then
              echo "✅ Lambda update complete"
              break
            fi
            sleep 5
          done

      # 10. Lambda Layer 연결
      - name: Attach Lambda Layer
        run: |
          aws lambda update-function-configuration \
            --function-name nextJs \
            --layers ${{ secrets.LAMBDA_LAYER_ARN }}

      # 11. 정적 자산 S3 업로드
      - name: Upload static assets to S3
        run: |
          aws s3 sync public ${{ secrets.S3_STORAGE_ADDRESS }}/public --delete

          if [ -d ".next/static" ]; then
            aws s3 sync .next/static ${{ secrets.S3_STORAGE_ADDRESS }}/_next/static --delete
          fi

      # 12. CloudFront 캐시 무효화
      - name: Invalidate CloudFront cache
        run: |
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          fi
