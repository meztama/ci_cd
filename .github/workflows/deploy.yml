# 📦 Next.js 프로젝트를 AWS Lambda + S3 + CloudFront에 배포하기 위한 GitHub Actions Workflow

name: Deploy Next.js to Lambda + S3 + CloudFront (with Layer)

on:
  push:
    branches: [main] # main 브랜치에 push될 때 실행됨

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      # 3. 의존성 설치
      - name: Install dependencies
        run: npm ci

      # 4. jq 설치 (JSON 파싱용)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 5. Lambda Layer를 위한 최소 패키지 설치
      - name: Setup minimal Lambda Layer dependencies
        run: |
          mkdir -p layer/nodejs
          cd layer/nodejs
          echo '{
            "name": "lambda-layer",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "next": "^15.3.2",
              "react": "^19.0.0",
              "react-dom": "^19.0.0",
              "@next/env": "^15.3.2"
            }
          }' > package.json
          npm install --omit=dev

      # 6. Layer 최적화 및 압축
      - name: Optimize and zip Lambda Layer
        run: |
          cd layer
          echo "🧹 Removing unnecessary files from layer..."
          rm -rf nodejs/node_modules/**/*.md || true
          rm -rf nodejs/node_modules/**/*.map || true
          rm -rf nodejs/node_modules/@next || true
          find nodejs -name "test" -type d | xargs rm -rf || true
          find nodejs -name "__tests__" -type d | xargs rm -rf || true
          echo "📦 Creating layer.zip..."
          zip -r layer.zip nodejs

      # 7. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 8. Layer를 S3에 업로드하고 Lambda Layer로 배포
      - name: Upload Layer.zip to S3 and publish Lambda Layer
        run: |
          aws s3 cp layer/layer.zip s3://${{ secrets.S3_LAMBDA_ADDRESS }}/layer/layer.zip
          echo "🛰 Lambda Layer 새 버전 배포 중..."
          PUBLISH_RESULT=$(aws lambda publish-layer-version \
            --layer-name next-layer \
            --content S3Bucket=${{ secrets.S3_LAMBDA_ADDRESS }},S3Key=layer/layer.zip \
            --compatible-runtimes nodejs20.x \
            --description "Next.js runtime dependencies" \
            --region ap-northeast-2)
          LAYER_ARN=$(echo $PUBLISH_RESULT | jq -r '.LayerVersionArn')
          echo "✅ LayerVersionArn: $LAYER_ARN"
          echo "LAMBDA_LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV

      # 9. Next.js 빌드 및 Lambda 코드 구성
      - name: Build and prepare Lambda files
        run: |
          npm run build
          mkdir -p lambda
          cp -r .next/standalone/* lambda/
          mkdir -p lambda/.next
          cp .next/required-server-files.json lambda/.next/required-server-files.json
          if [ -d ".next/static" ]; then
            cp -r .next/static lambda/.next/static
          fi
          cp index.js lambda/index.js

          echo "🧹 Removing duplicated modules in Lambda package..."
          rm -rf lambda/node_modules/next || true
          rm -rf lambda/node_modules/react || true
          rm -rf lambda/node_modules/react-dom || true

      # 10. Lambda 코드 압축
      - name: Zip Lambda package
        run: |
          cd lambda
          zip -r ../lambda.zip .

      # 11. Lambda 함수 코드 업데이트
      - name: Upload Lambda zip to S3 and update function code
        run: |
          aws s3 cp lambda.zip s3://${{ secrets.S3_LAMBDA_ADDRESS }}/lambda/lambda.zip
          aws lambda update-function-code \
            --function-name nextJs \
            --s3-bucket ${{ secrets.S3_LAMBDA_ADDRESS }} \
            --s3-key lambda/lambda.zip

      # 12. Lambda 상태 대기 후 Layer 연결
      - name: Wait for Lambda to become Active
        run: |
          for i in {1..30}; do
            STATUS=$(aws lambda get-function-configuration --function-name nextJs --query 'LastUpdateStatus' --output text)
            echo "Status: $STATUS"
            if [ "$STATUS" = "Successful" ]; then
              break
            fi
            sleep 5
          done

      - name: Attach Lambda Layer
        run: |
          aws lambda update-function-configuration \
            --function-name nextJs \
            --layers $LAMBDA_LAYER_ARN

      # 13. 정적 파일 S3로 업로드
      - name: Upload static assets to S3
        run: |
          aws s3 sync public ${{ secrets.S3_STORAGE_ADDRESS }}/public --delete
          if [ -d ".next/static" ]; then
            aws s3 sync .next/static ${{ secrets.S3_STORAGE_ADDRESS }}/_next/static --delete
          fi

      # 14. CloudFront 캐시 무효화
      - name: Invalidate CloudFront cache
        run: |
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          fi
